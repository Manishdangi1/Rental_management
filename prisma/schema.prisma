generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  role          UserRole       @default(CUSTOMER)
  isActive      Boolean        @default(true)
  emailVerified Boolean        @default(false)
  profileImage  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastLogin     DateTime?
  invoices      Invoice[]
  notifications Notification[]
  payments      Payment[]
  rentals       Rental[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id                 String                @id @default(cuid())
  name               String
  description        String?
  sku                String                @unique
  categoryId         String
  isRentable         Boolean               @default(true)
  isActive           Boolean               @default(true)
  images             String[]
  specifications     Json?
  totalQuantity      Int                   @default(1)
  availableQuantity  Int                   @default(1)
  minimumRentalDays  Int                   @default(1)
  maximumRentalDays  Int?
  weight             Float?
  dimensions         Json?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  basePrice          Float?
  damagePolicy       String?
  insuranceAmount    Float?
  insuranceRequired  Boolean               @default(false)
  isSeasonal         Boolean               @default(false)
  peakSeasonEnd      DateTime?
  peakSeasonStart    DateTime?
  rentalInstructions String?
  returnRequirements String?
  setupRequirements  String?
  pricelistItems     PricelistItem[]
  availability       ProductAvailability[]
  productImages      ProductImage[]
  category           Category              @relation(fields: [categoryId], references: [id])
  rentalItems        RentalItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  imageUrl  String
  altText   String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductAvailability {
  id        String   @id @default(cuid())
  productId String
  date      DateTime
  available Int
  reserved  Int      @default(0)
  rented    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, date])
  @@map("product_availability")
}

model Pricelist {
  id           String          @id @default(cuid())
  name         String
  description  String?
  isActive     Boolean         @default(true)
  validFrom    DateTime
  validTo      DateTime?
  customerType CustomerType?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  items        PricelistItem[]

  @@map("pricelists")
}

model PricelistItem {
  id                 String       @id @default(cuid())
  pricelistId        String
  productId          String
  rentalType         RentalType
  price              Float
  currency           String       @default("USD")
  minimumDays        Int          @default(1)
  maximumDays        Int?
  discount           Float?       @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  bulkDiscount       Boolean      @default(false)
  bulkDiscountAmount Float?
  bulkThreshold      Int?
  discountType       DiscountType @default(PERCENTAGE)
  seasonalMultiplier Float?
  validFrom          DateTime     @default(now())
  validTo            DateTime?
  pricelist          Pricelist    @relation(fields: [pricelistId], references: [id])
  product            Product      @relation(fields: [productId], references: [id])

  @@unique([pricelistId, productId, rentalType])
  @@map("pricelist_items")
}

model Rental {
  id              String         @id @default(cuid())
  customerId      String
  status          RentalStatus   @default(QUOTATION)
  startDate       DateTime?
  endDate         DateTime?
  totalAmount     Float          @default(0)
  securityDeposit Float?         @default(0)
  lateFees        Float?         @default(0)
  notes           String?
  pickupAddress   String?
  returnAddress   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  customerName    String
  orderNumber     String         @unique
  subtotal        Float          @default(0)
  tax             Float          @default(0)
  invoiceStatus   String         @default("NOTHING_TO_INVOICE")
  deliveries      Delivery[]
  invoices        Invoice[]
  notifications   Notification[]
  payments        Payment[]
  items           RentalItem[]
  customer        User           @relation(fields: [customerId], references: [id])

  @@map("rentals")
}

model RentalItem {
  id            String    @id @default(cuid())
  rentalId      String
  productId     String
  quantity      Int
  unitPrice     Float
  totalPrice    Float
  notes         String?
  createdAt     DateTime  @default(now())
  endDate       DateTime?
  productName   String
  rentalType    String
  startDate     DateTime?
  invoiceStatus String    @default("NOTHING_TO_INVOICE")
  product       Product   @relation(fields: [productId], references: [id])
  rental        Rental    @relation(fields: [rentalId], references: [id])

  @@map("rental_items")
}

model Delivery {
  id           String         @id @default(cuid())
  rentalId     String
  type         DeliveryType
  status       DeliveryStatus @default(SCHEDULED)
  scheduledAt  DateTime
  completedAt  DateTime?
  address      String
  contactName  String?
  contactPhone String?
  notes        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  rental       Rental         @relation(fields: [rentalId], references: [id])

  @@map("deliveries")
}

model Payment {
  id             String        @id @default(cuid())
  rentalId       String
  customerId     String
  amount         Float
  currency       String        @default("USD")
  status         PaymentStatus @default(PENDING)
  method         PaymentMethod
  transactionId  String?
  stripeIntentId String?
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  users          User          @relation(fields: [customerId], references: [id])
  rental         Rental        @relation(fields: [rentalId], references: [id])

  @@map("payments")
}

model Invoice {
  id            String        @id @default(cuid())
  rentalId      String
  customerId    String
  invoiceNumber String        @unique
  amount        Float
  tax           Float         @default(0)
  total         Float
  status        InvoiceStatus @default(DRAFT)
  dueDate       DateTime
  paidAt        DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  customer      User          @relation(fields: [customerId], references: [id])
  rental        Rental        @relation(fields: [rentalId], references: [id])

  @@map("invoices")
}

model Notification {
  id       String              @id @default(cuid())
  userId   String
  rentalId String?
  type     NotificationType
  title    String
  message  String
  isRead   Boolean             @default(false)
  sentAt   DateTime            @default(now())
  readAt   DateTime?
  channel  NotificationChannel @default(EMAIL)
  rental   Rental?             @relation(fields: [rentalId], references: [id])
  user     User                @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum CustomerType {
  REGULAR
  VIP
  CORPORATE
  WHOLESALE
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum RentalType {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum RentalStatus {
  QUOTATION
  QUOTATION_SENT
  PICKED_UP
  RETURNED
  RESERVED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum DeliveryStatus {
  SCHEDULED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum DeliveryType {
  PICKUP
  RETURN
}

enum NotificationChannel {
  EMAIL
  SMS
  PORTAL
  PUSH
}

enum NotificationType {
  RENTAL_CONFIRMATION
  PICKUP_REMINDER
  RETURN_REMINDER
  PAYMENT_CONFIRMATION
  LATE_RETURN_WARNING
  SYSTEM_UPDATE
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
  STRIPE
  PAYPAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}
