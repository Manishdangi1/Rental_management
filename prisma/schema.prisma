// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  role          UserRole @default(CUSTOMER)
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  profileImage  String?
  lastLogin     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  rentals       Rental[]
  payments      Payment[]
  notifications Notification[]
  invoices      Invoice[]

  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

// Product Categories
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

// Rental Products
model Product {
  id                String   @id @default(cuid())
  name              String
  description       String?
  sku               String   @unique
  categoryId        String
  isRentable        Boolean  @default(true)
  isActive          Boolean  @default(true)
  images            String[]
  specifications    Json?
  totalQuantity     Int      @default(1)
  availableQuantity Int      @default(1)
  minimumRentalDays Int      @default(1)
  maximumRentalDays Int?
  weight            Float?
  dimensions        Json?
  
  // Enhanced rental fields
  rentalInstructions String?  // Instructions for customers
  setupRequirements  String?  // What's needed to set up the product
  returnRequirements String?  // What customers need to do before return
  damagePolicy      String?  // Policy for damages
  insuranceRequired Boolean   @default(false)
  insuranceAmount   Float?   // Required insurance amount
  
  // Pricing and availability
  basePrice         Float?   // Base price for reference
  isSeasonal        Boolean  @default(false)  // Seasonal pricing
  peakSeasonStart   DateTime? // Peak season start date
  peakSeasonEnd     DateTime? // Peak season end date
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  category          Category @relation(fields: [categoryId], references: [id])
  pricelistItems   PricelistItem[]
  rentalItems      RentalItem[]
  productImages    ProductImage[]
  availability     ProductAvailability[]

  @@map("products")
}

// Product Images
model ProductImage {
  id        String   @id @default(cuid())
  productId String
  imageUrl  String
  altText   String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Product Availability Tracking
model ProductAvailability {
  id          String   @id @default(cuid())
  productId   String
  date        DateTime // Date for availability tracking
  available   Int      // Available quantity on this date
  reserved    Int      @default(0) // Reserved quantity on this date
  rented      Int      @default(0) // Currently rented quantity on this date
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, date])
  @@map("product_availability")
}

// Pricing Management
model Pricelist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  validFrom   DateTime
  validTo     DateTime?
  customerType CustomerType?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items PricelistItem[]

  @@map("pricelists")
}

enum CustomerType {
  REGULAR
  VIP
  CORPORATE
  WHOLESALE
}

model PricelistItem {
  id          String   @id @default(cuid())
  pricelistId String
  productId   String
  rentalType  RentalType
  price       Float
  currency    String   @default("USD")
  minimumDays Int      @default(1)
  maximumDays Int?
  discount    Float?   @default(0)
  
  // Enhanced pricing fields
  discountType    DiscountType @default(PERCENTAGE) // PERCENTAGE or FIXED_AMOUNT
  bulkDiscount    Boolean      @default(false)      // Apply bulk discounts
  bulkThreshold   Int?         // Quantity threshold for bulk discount
  bulkDiscountAmount Float?    // Bulk discount amount
  
  // Seasonal pricing
  seasonalMultiplier Float?    // Multiplier for seasonal pricing
  validFrom         DateTime   @default(now())
  validTo           DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  pricelist Pricelist @relation(fields: [pricelistId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@unique([pricelistId, productId, rentalType])

  @@map("pricelist_items")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum RentalType {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

// Rental Orders
model Rental {
  id                String        @id @default(cuid())
  orderNumber       String        @unique // Unique order number like RO-123456-001
  customerId        String
  customerName      String        // Customer name for display
  status            RentalStatus  @default(QUOTATION)
  startDate         DateTime?     // Made optional since orders can start as QUOTATION
  endDate           DateTime?     // Made optional since orders can start as QUOTATION
  totalAmount       Float         @default(0)
  subtotal          Float         @default(0) // Subtotal before tax
  tax               Float         @default(0) // Tax amount
  securityDeposit   Float?        @default(0)
  lateFees          Float?        @default(0)
  notes             String?
  pickupAddress     String?
  returnAddress     String?
  invoiceStatus     String        @default("NOTHING_TO_INVOICE") // FULLY_INVOICED, NOTHING_TO_INVOICE, TO_INVOICE
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  customer          User          @relation(fields: [customerId], references: [id])
  items             RentalItem[]
  deliveries        Delivery[]
  payments          Payment[]
  invoices          Invoice[]
  notifications     Notification[]

  @@map("rentals")
}

enum RentalStatus {
  QUOTATION
  QUOTATION_SENT
  PICKED_UP
  RETURNED
  RESERVED
}

model RentalItem {
  id         String   @id @default(cuid())
  rentalId   String
  productId  String
  productName String  // Product name for display
  startDate  DateTime? // Individual item start date
  endDate    DateTime? // Individual item end date
  quantity   Int
  rentalType String   // HOURLY, DAILY, WEEKLY, MONTHLY
  unitPrice  Float
  totalPrice Float
  notes      String?
  invoiceStatus String @default("NOTHING_TO_INVOICE") // FULLY_INVOICED, NOTHING_TO_INVOICE, TO_INVOICE
  createdAt  DateTime @default(now())

  // Relations
  rental  Rental  @relation(fields: [rentalId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("rental_items")
}

// Delivery Management
model Delivery {
  id          String        @id @default(cuid())
  rentalId    String
  type        DeliveryType
  status      DeliveryStatus @default(SCHEDULED)
  scheduledAt DateTime
  completedAt DateTime?
  address     String
  contactName String?
  contactPhone String?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  rental Rental @relation(fields: [rentalId], references: [id])

  @@map("deliveries")
}

enum DeliveryType {
  PICKUP
  RETURN
}

enum DeliveryStatus {
  SCHEDULED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

// Payment Management
model Payment {
  id            String        @id @default(cuid())
  rentalId      String
  customerId    String
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  stripeIntentId String?
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  rental   Rental @relation(fields: [rentalId], references: [id])
  customer User   @relation(fields: [customerId], references: [id])

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
  STRIPE
  PAYPAL
}

// Invoicing
model Invoice {
  id          String   @id @default(cuid())
  rentalId    String
  customerId  String
  invoiceNumber String @unique
  amount      Float
  tax         Float    @default(0)
  total       Float
  status      InvoiceStatus @default(DRAFT)
  dueDate     DateTime
  paidAt      DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rental   Rental @relation(fields: [rentalId], references: [id])
  customer User   @relation(fields: [customerId], references: [id])

  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  userId    String
  rentalId  String?
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  sentAt    DateTime         @default(now())
  readAt    DateTime?
  channel   NotificationChannel @default(EMAIL)

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  rental Rental? @relation(fields: [rentalId], references: [id])

  @@map("notifications")
}

enum NotificationType {
  RENTAL_CONFIRMATION
  PICKUP_REMINDER
  RETURN_REMINDER
  PAYMENT_CONFIRMATION
  LATE_RETURN_WARNING
  SYSTEM_UPDATE
}

enum NotificationChannel {
  EMAIL
  SMS
  PORTAL
  PUSH
}

// System Settings
model SystemSetting {
  id          String @id @default(cuid())
  key         String @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
} 